a <-available.packages()
find.package()'devtools")'
installed.packages("devtools")
find.package()'devtools")'
find.package("devtools")
find.package("devtools")
''
library (devtools)
avilable.packages
libaray(devtools)
library(codetools)
library(devtools)
find.package("devtools")
install.packages("devtools")
find.package("devtools")
avilable.packages()
a
find.package("devtools")
x <- 5
x
print(x)
x <- 1:20
x
print(x)
x
x
x <-c(0.5,0.6)
x
x <-c(T,F)
x
x <- c(4, "a", TRUE)
x
y <-c(1.7, "a")
y
vectors x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(1,"a",TRUE,1+4i)
x
m <-matrix (nrow=2, ncol=1)
m
dim(m)
m <-matrix (nrow=2, ncol=3)
m
dim(m)
attributes()
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
read.table()
y <-data.frame(a=1,b="a")
y
dump (c("x","y")), file ="data.R)"
dput(y)
x[x > 4] <- 10
x
x[x > 10] == 4
x
x[x >= 11] <- 4
x[x >= 10] <- 4
x[x >= 11] <- 4
x
x[x >= 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
u <-x > 10
u
pwd
getwd()
read("key.txt")
x <- list(foo=1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
x <- list(foo=1:4, bar=0.6, baz="Hello")
x[c(1,3)]
$foo
name <-"foo"
x[[name]]
$name
x$name
x$foo
x<- list(a=list(10,12,14), b= c(3.14,2.81))
x[[c(1,3)]]
x <-matrix (1:6,2,3)
x[1,2]
x[2,1]
x[1,]
x <- 1:4 ; Y <- 1:4
x+y
x +  y
(x + y)
x <- 1:4 ; Y <- 2:7
(x + y)
x + y
library(httr)
> oauth_endpoints("github")
> myapp ", secret = "")
> github_token  req  stop_for_status(req)
> content(req)
> BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
github_token  req  stop_for_status(req)
content(req)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
source('C:/Users/bhumikashah/datasciencecoursera/Course_video_pdf/R Prog/Assignment 1/pollutantmean.R')
add2 <- function(x,y){
x+y
}
add2 <- function(x,y){
x+y
}
source('~/.active-rstudio-document')
monitor <- paste("00", id_string, ".csv", sep="")
add2 <- function(x,y){
x+y
}
3 + 4
add2 <- function(x,y){
x+y
}
add2(2=1)
add2(2+1)
add2 <- function(x,y){
x+y
}
add2(2+1)
add2(2,1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
filename <- vector(mode="character", length=length(id))
for(i in seq_along(id)) {
x <- id[i]
id_string <- toString(x)
if (x >= 1 && x <= 9) {
monitor <- paste("00", id_string, ".csv", sep="")
}
else if (x >= 10 && x <= 99) {
id_string <- toString(x)
monitor <- paste("0", id_string, ".csv", sep="")
}
else {
id_string <- toString(x)
monitor <- paste(id_string, ".csv", sep="")
}
filename[i] <- monitor
#print(monitor)
}
accumulator <- 0
total <- 0
for(i in filename) {
airquality <- read.csv(i)
good <- complete.cases(airquality[pollutant])
#good <- complete.cases(airquality[[pollutant]])
airquality <- airquality[good, ]
total <- total + nrow(airquality)
#accumulator <- accumulator + sum(airquality[pollutant], na.rm = TRUE)
# We need [[]] around pollutant instead of [] since airquality[pollutant]
# is a data.frame but we need a vector here. Please note that using either
#[[]] or [] gives the same results as the test cases but only [[]] successfully
#passes the submit() script
accumulator <- accumulator + sum(airquality[[pollutant]], na.rm = TRUE)
}
accumulator/total
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
getwd()
setwd('C:\Users\bhumikashah\datasciencecoursera\Course_video_pdf\R Prog\Assignment 1')
setwd("C:\Users\bhumikashah\datasciencecoursera\Course_video_pdf\R Prog\Assignment 1")
setwd(C:\Users\bhumikashah\datasciencecoursera\Course_video_pdf\R Prog\Assignment 1)
cd "C:\Users\bhumikashah\datasciencecoursera\Course_video_pdf\R Prog\Assignment 1"
cd 'C:\Users\bhumikashah\datasciencecoursera\Course_video_pdf\R Prog\Assignment 1'
setwd("C:\\Users\bhumikashah\\datasciencecoursera\\Course_video_pdf\\R Prog\\Assignment 1")
setwd("C:\\src")
getwd()
